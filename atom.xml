<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓小小小码农</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-12T15:45:19.197Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vuex</title>
    <link href="http://yoursite.com/2019/03/01/Vuex/"/>
    <id>http://yoursite.com/2019/03/01/Vuex/</id>
    <published>2019-03-01T14:25:30.000Z</published>
    <updated>2019-06-12T15:45:19.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新认真走一遍来时的路，又是另一种认识"><a href="#重新认真走一遍来时的路，又是另一种认识" class="headerlink" title="重新认真走一遍来时的路，又是另一种认识"></a>重新认真走一遍来时的路，又是另一种认识</h1><h2 id="Vuex-的状态存储是响应式的。当-Vue-组件从-store-中读取状态的时候，若-store-中的状态发生变化，那么相应的组件也会相应地得到高效更新。"><a href="#Vuex-的状态存储是响应式的。当-Vue-组件从-store-中读取状态的时候，若-store-中的状态发生变化，那么相应的组件也会相应地得到高效更新。" class="headerlink" title="Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。"></a>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</h2><h2 id="通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码"><a href="#通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码" class="headerlink" title="通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码"></a>通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Vuex中主要包括的State、Getter、Mutaion、Action和Module，前四者用的比较多。通过字面意思大致为State状态（数据源），Getter获取数据，<br>Mutaion直接修改数据，Action异步修改数据，Module模块化。<br><!-- 接下来我慢慢的一个一个的去复习一遍。在Vuex中最讨厌的就是刷新浏览器数据丢失这个问题。个人觉得还是受制于浏览器吧。 --></p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const content = &#123;</span><br><span class="line">template:`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">computed:&#123;</span><br><span class="line">count()&#123;</span><br><span class="line">return store.state.count</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看着是一个计算属性取state对象的属性，但是一旦多了就会像这样了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const content = &#123;</span><br><span class="line">template:`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">computed:&#123;</span><br><span class="line">count()&#123;</span><br><span class="line">return store.state.count</span><br><span class="line">&#125;,</span><br><span class="line">count1()&#123;</span><br><span class="line">return store.state.count1</span><br><span class="line">&#125;,</span><br><span class="line">count2()&#123;</span><br><span class="line">return store.state.count2</span><br><span class="line">&#125;,</span><br><span class="line">count3()&#123;</span><br><span class="line">return store.state.coun3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样看着实在确实有种代码没有复用的问题,在通过Vuex文档会发现，官方在这些上分别给我们提供了辅助函数（四个）;<br>在辅助函数的基础上去做这些操作就会发现简单快捷了很多，大大的提高了开发效率;例如上面代码没有使用辅助函数带来的问题使用后会是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line">const content = &#123;</span><br><span class="line">template:`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">computed:mapSate(&#123;</span><br><span class="line">count:state =&gt; state.count,</span><br><span class="line">&#125;); //第一种</span><br><span class="line">computed:mapState([&apos;count&apos;]);//第二种</span><br><span class="line">// 映射 this.count 为 store.state.count</span><br><span class="line">&#125;</span><br><span class="line">// 或者可以使用 ... ES6的展开运算符</span><br><span class="line">computed:&#123;</span><br><span class="line">count()&#123;</span><br><span class="line">return store.state.count</span><br><span class="line">&#125;,</span><br><span class="line">...mapState([&apos;count1&apos;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>类似于计算属性，我们需要从state中获取某个值，但是需要经过处理后获得的值这个时候我们需要Getter来进行操作了，getter的返回值会根据依赖缓存起来，且且只有当它的依赖值发生了改变才会被重新计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>mapGetters 辅助函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</span><br><span class="line"></span><br><span class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">  // 使用对象展开运算符将 getter 混入 computed 对象中</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &apos;doneTodos&apos;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>在Vuex中改变State中的状态的唯一方式提交mutation，也就是更新值的唯一方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  // state整个对象</span><br><span class="line">  // state：第一个参数, payload(载荷):第二个参数建议用对象的方式传进来,大多数的时候也是对象</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 触发</span><br><span class="line">store.commit(&apos;increment&apos;)  //默认-1</span><br><span class="line">//带有第二个参数</span><br><span class="line">store.commit(&apos;increment&apos;,10) // 2</span><br><span class="line">store.commit(&apos;increment&apos;,&#123;   // 3</span><br><span class="line">amount:10</span><br><span class="line">&#125;)</span><br><span class="line">// 建议通常如下写法</span><br><span class="line">//type 属性的对象的写法</span><br><span class="line">store.commit(&#123;  //4</span><br><span class="line">type:&apos;increment&apos;,</span><br><span class="line">amount: 10</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//拥有参数的提交时，mutations中也要接受参数</span><br><span class="line">//这样适用3或者4的提交方式</span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>*Mutation 必须是同步函数，Action中是提交mutations，然后在去更改的状态，这样可以包含任意的异步操作<br>mapMutations辅助函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      &apos;increment&apos;, // 将 `this.increment()` 映射为 `this.$store.commit(&apos;increment&apos;)`</span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: &apos;increment&apos; // 将 `this.add()` 映射为 `this.$store.commit(&apos;increment&apos;)`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>如果在mutations之前有异步操作的时候就可以借助Action来先执行了异步在提交mutations<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  // 第一种写法</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      // context 类似store实例相同的方法和属性，因此可以调用commit</span><br><span class="line">      context.commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    //第二种 es6的参数解构方式来简化代码</span><br><span class="line">    increment (&#123;commit&#125;) &#123;</span><br><span class="line">      commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>mutations中只能同步，action异步操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      commit(&apos;increment&apos;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Action中常用的分发，dispatch()。同样支持载荷方式进行分发<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 以载荷形式分发</span><br><span class="line">store.dispatch(&apos;incrementAsync&apos;, &#123;</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 以对象形式分发</span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &apos;incrementAsync&apos;,</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通常建议用对象的形式分发</span><br><span class="line">//action异步完成时返回promise对象</span><br></pre></td></tr></table></figure></p><p>*mapAction辅助函数跟mapMutations类似</p><blockquote><p>记录下来，更多有助于自己去总结和技术提升之后的优化代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重新认真走一遍来时的路，又是另一种认识&quot;&gt;&lt;a href=&quot;#重新认真走一遍来时的路，又是另一种认识&quot; class=&quot;headerlink&quot; title=&quot;重新认真走一遍来时的路，又是另一种认识&quot;&gt;&lt;/a&gt;重新认真走一遍来时的路，又是另一种认识&lt;/h1&gt;&lt;h2 id=&quot;Vuex-的状态存储是响应式的。当-Vue-组件从-store-中读取状态的时候，若-store-中的状态发生变化，那么相应的组件也会相应地得到高效更新。&quot;&gt;&lt;a href=&quot;#Vuex-的状态存储是响应式的。当-Vue-组件从-store-中读取状态的时候，若-store-中的状态发生变化，那么相应的组件也会相应地得到高效更新。&quot; class=&quot;headerlink&quot; title=&quot;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。&quot;&gt;&lt;/a&gt;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。&lt;/h2&gt;&lt;h2 id=&quot;通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码&quot;&gt;&lt;a href=&quot;#通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码&quot; class=&quot;headerlink&quot; title=&quot;通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码&quot;&gt;&lt;/a&gt;通俗讲就是组件之间数据共享，代码维护和少敲几遍且稍稍看似不影响性能的代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const store = new Vuex.Store(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mutations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    increment (state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      state.count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://yoursite.com/2019/02/23/%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2019/02/23/递归/</id>
    <published>2019-02-23T14:52:30.000Z</published>
    <updated>2019-06-02T15:10:36.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置当前递归函数为null时出现的错误，拿小本本记录上"><a href="#设置当前递归函数为null时出现的错误，拿小本本记录上" class="headerlink" title="设置当前递归函数为null时出现的错误，拿小本本记录上"></a>设置当前递归函数为null时出现的错误，拿小本本记录上</h1><h2 id="递归函数是在一个函数通过名字调用自身的情况下构成"><a href="#递归函数是在一个函数通过名字调用自身的情况下构成" class="headerlink" title="递归函数是在一个函数通过名字调用自身的情况下构成"></a>递归函数是在一个函数通过名字调用自身的情况下构成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function recursion(num)&#123;</span><br><span class="line">if(num &lt;= 1)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return num * recursion(num - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var anotherRecursion = recursion;</span><br><span class="line">recursion = null;</span><br><span class="line">anotherRecursion(4) //出错</span><br></pre></td></tr></table></figure><p>以上代码先把recursion()函数保存在变量anotherRecursion中，然后将recursion变量设置为null，结果指向原始函数的引用只有一个了，但在接下来的调用由于必须调用recursion，而recursion已经不是函数了所以会导致错误。在看了相关文档发现使用arguments.callee可以解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function recursion(num)&#123;</span><br><span class="line">if(num &lt;= 1)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return num * arguments.callee(num - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：arguments.callee 是一个指向正在执行的函数的指针，因此可以用它来实现对函数的递归调用。在后面也发现一个bug，在严格模式下这样写是不适应的会报错。在最后用命名函数解决了这些问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var recursion = (function r(num)&#123;</span><br><span class="line">if(num &lt;= 1)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return num * r(num - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>记录下来，更多有助于自己去总结和技术提升之后的优化代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设置当前递归函数为null时出现的错误，拿小本本记录上&quot;&gt;&lt;a href=&quot;#设置当前递归函数为null时出现的错误，拿小本本记录上&quot; class=&quot;headerlink&quot; title=&quot;设置当前递归函数为null时出现的错误，拿小本本记录上&quot;&gt;&lt;/a&gt;设置当前递归函数为null时出现的错误，拿小本本记录上&lt;/h1&gt;&lt;h2 id=&quot;递归函数是在一个函数通过名字调用自身的情况下构成&quot;&gt;&lt;a href=&quot;#递归函数是在一个函数通过名字调用自身的情况下构成&quot; class=&quot;headerlink&quot; title=&quot;递归函数是在一个函数通过名字调用自身的情况下构成&quot;&gt;&lt;/a&gt;递归函数是在一个函数通过名字调用自身的情况下构成&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function recursion(num)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(num &amp;lt;= 1)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return num * recursion(num - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>小程序ios输入表情显示和存取问题</title>
    <link href="http://yoursite.com/2018/11/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADios%E6%89%8B%E6%9C%BA%E8%BE%93%E5%85%A5%E6%B3%95%E5%B8%A6%E6%9C%89%E8%A1%A8%E6%83%85%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/29/小程序中ios手机输入法带有表情显示问题/</id>
    <published>2018-11-29T11:25:39.000Z</published>
    <updated>2019-02-11T04:03:58.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序输入表情处理"><a href="#小程序输入表情处理" class="headerlink" title="小程序输入表情处理"></a>小程序输入表情处理</h2><p>项目中有个一个评论的功能，很平常的一个功能但是在安卓机上没有任何问题，却在ios上面输入评论的时候却有一个可以输入表情的按钮这个是在安卓上没有就有点尴尬了也是微信上独有的。找了一个其他小程序的输入也有这个功能都可以使用就觉得这个就不是问题了想了半天试过base64的方式但转换回来的时候就不正确了。最后使用了二进制的方式发送给后台。<br><a id="more"></a></p><h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//将字符串转换成二进制形式，中间用空格隔开</span><br><span class="line">const strToBinary = (str) =&gt; &#123;</span><br><span class="line">  let result = [];</span><br><span class="line">  let list = str.split(&apos;&apos;);</span><br><span class="line">  for(let i = 0;i&lt;list.length;i++)&#123;</span><br><span class="line">    if(i != 0)&#123;</span><br><span class="line">      result.push(&apos; &apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    let item = list[i];</span><br><span class="line">    let binartStr = item.charCodeAt().toString(2);</span><br><span class="line">    result.push(binartStr);</span><br><span class="line">  &#125;</span><br><span class="line">  return result.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">//将二进制字符串转换成Unicode字符串</span><br><span class="line">const binaryToStr = (str) =&gt; &#123;</span><br><span class="line">  let result = [];</span><br><span class="line">  let list = str.split(&apos; &apos;);</span><br><span class="line">  for(let i=0;i&lt;list.length;i++)&#123;</span><br><span class="line">    let item = list[i];</span><br><span class="line">    let asciiCode = parseInt(item,2);</span><br><span class="line">    let charValue = String.fromCharCode(asciiCode);</span><br><span class="line">    result.push(charValue);</span><br><span class="line">  &#125;</span><br><span class="line">  return result.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="此Demo为在工作中所遇到的需求"><a href="#此Demo为在工作中所遇到的需求" class="headerlink" title="此Demo为在工作中所遇到的需求"></a>此Demo为在工作中所遇到的需求</h2><blockquote><p>记录下来，更多有助于自己去总结和技术提升之后的优化代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序输入表情处理&quot;&gt;&lt;a href=&quot;#小程序输入表情处理&quot; class=&quot;headerlink&quot; title=&quot;小程序输入表情处理&quot;&gt;&lt;/a&gt;小程序输入表情处理&lt;/h2&gt;&lt;p&gt;项目中有个一个评论的功能，很平常的一个功能但是在安卓机上没有任何问题，却在ios上面输入评论的时候却有一个可以输入表情的按钮这个是在安卓上没有就有点尴尬了也是微信上独有的。找了一个其他小程序的输入也有这个功能都可以使用就觉得这个就不是问题了想了半天试过base64的方式但转换回来的时候就不正确了。最后使用了二进制的方式发送给后台。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>小程序富文本显示</title>
    <link href="http://yoursite.com/2018/11/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%8C%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/11/29/小程序富文本显示/</id>
    <published>2018-11-29T11:25:39.000Z</published>
    <updated>2019-02-11T03:38:05.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-实现HTML标签的转义"><a href="#JS-实现HTML标签的转义" class="headerlink" title="JS - 实现HTML标签的转义"></a>JS - 实现HTML标签的转义</h2><p>在小程序中的富文本编辑后的文本显示，小程序文档中有提供组件，我这里后台用的是百度的UEditor编辑器所在数据库中存有‘lt’，‘gt’等字符是在rich-text中处理不了的。通过想到转义的方法就到网上去找了一些相关的博客了解了一下根据别人的办法改变一下变成自己的解决办法。使用以下封装函数进行处理后在用rich-text组件即可达到正确显示的效果，通过正则表达式进行替换<br><a id="more"></a></p><h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//HTML标签转义（&lt; -&gt; &amp;lt;）</span><br><span class="line">//html2Escape函数是让其转换成标签形式,这里我们不需要这种</span><br><span class="line">function html2Escape(sHtml) &#123;</span><br><span class="line"> return sHtml.replace(/[&lt;&gt;&amp;&quot;]/g,function(c)&#123;</span><br><span class="line">   return &#123;&apos;&lt;&apos;:&apos;&amp;lt;&apos;,&apos;&gt;&apos;:&apos;&amp;gt;&apos;,&apos;&amp;&apos;:&apos;&amp;amp;&apos;,&apos;&quot;&apos;:&apos;&amp;quot;&apos;&#125;[c];</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">//HTML标签反转义（&amp;lt; -&gt; &lt;）</span><br><span class="line">//escape2Html是让内容中存在的&amp;lt标签转换成html标签，使用这种就可以解决</span><br><span class="line">const escape2Html = (str) =&gt; &#123;</span><br><span class="line">  let arrEntities = &#123;&apos;lt&apos;:&apos;&lt;&apos;,&apos;gt&apos;:&apos;&gt;&apos;,&apos;nbsp&apos;:&apos; &apos;,&apos;amp&apos;:&apos;&amp;&apos;,&apos;quot&apos;:&apos;&quot;&apos;&#125;;</span><br><span class="line">  return str.replace(/&amp;(lt|gt|nbsp|amp|quot);/ig,function(all,t)&#123;</span><br><span class="line">    return arrEntities[t];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="此Demo为在工作中所遇到的需求"><a href="#此Demo为在工作中所遇到的需求" class="headerlink" title="此Demo为在工作中所遇到的需求"></a>此Demo为在工作中所遇到的需求</h2><blockquote><p>记录下来，更多有助于自己去总结和技术提升之后的优化代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS-实现HTML标签的转义&quot;&gt;&lt;a href=&quot;#JS-实现HTML标签的转义&quot; class=&quot;headerlink&quot; title=&quot;JS - 实现HTML标签的转义&quot;&gt;&lt;/a&gt;JS - 实现HTML标签的转义&lt;/h2&gt;&lt;p&gt;在小程序中的富文本编辑后的文本显示，小程序文档中有提供组件，我这里后台用的是百度的UEditor编辑器所在数据库中存有‘lt’，‘gt’等字符是在rich-text中处理不了的。通过想到转义的方法就到网上去找了一些相关的博客了解了一下根据别人的办法改变一下变成自己的解决办法。使用以下封装函数进行处理后在用rich-text组件即可达到正确显示的效果，通过正则表达式进行替换&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue表情emoji组件</title>
    <link href="http://yoursite.com/2018/11/21/vue%E8%A1%A8%E6%83%85emoji%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/11/21/vue表情emoji组件/</id>
    <published>2018-11-21T14:48:25.000Z</published>
    <updated>2019-02-11T03:13:58.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="emoji表情Demo"><a href="#emoji表情Demo" class="headerlink" title="emoji表情Demo"></a>emoji表情Demo</h2><h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><a id="more"></a><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; id=&quot;app&quot;&gt;</span><br><span class="line">&lt;p&gt;文本输入框&lt;/p&gt;</span><br><span class="line">&lt;textarea class=&quot;text&quot; rows=&quot;5&quot; v-model=&quot;content&quot; &gt;&lt;/textarea&gt;</span><br><span class="line">&lt;p&gt;表情选择框&lt;/p&gt;</span><br><span class="line">&lt;v-emotion @emotion=&quot;handleEmotion&quot; :height=&quot;200&quot; &gt;&lt;/v-emotion&gt;</span><br><span class="line">&lt;p&gt;效果显示框&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;text-place&quot;&gt;</span><br><span class="line">&lt;!-- /\#[\u4E00-\u9FA5]&#123;1,3&#125;\;/gi 匹配出含 #XXX; 的字段 --&gt;</span><br><span class="line">&lt;p v-html=&quot;content.replace(/\#[\u4E00-\u9FA5]&#123;1,3&#125;\;/gi, emotion)&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.17/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;v-emotion.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;emotion.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">content: &apos;&apos;,</span><br><span class="line">comment: &apos;&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleEmotion (i) &#123;</span><br><span class="line">this.content += i;</span><br><span class="line">&#125;,</span><br><span class="line">// 将匹配结果替换表情图片</span><br><span class="line">emotion (res) &#123;</span><br><span class="line">let word = res.replace(/\#|\;/gi,&apos;&apos;);</span><br><span class="line">const list = [&apos;微笑&apos;, &apos;撇嘴&apos;, &apos;色&apos;, &apos;发呆&apos;, &apos;得意&apos;, &apos;流泪&apos;, &apos;害羞&apos;, &apos;闭嘴&apos;, &apos;睡&apos;, &apos;大哭&apos;, &apos;尴尬&apos;, &apos;发怒&apos;, &apos;调皮&apos;, &apos;呲牙&apos;, &apos;惊讶&apos;, &apos;难过&apos;, &apos;酷&apos;, &apos;冷汗&apos;, &apos;抓狂&apos;, &apos;吐&apos;, &apos;偷笑&apos;, &apos;可爱&apos;, &apos;白眼&apos;, &apos;傲慢&apos;, &apos;饥饿&apos;, &apos;困&apos;, &apos;惊恐&apos;, &apos;流汗&apos;, &apos;憨笑&apos;, &apos;大兵&apos;, &apos;奋斗&apos;, &apos;咒骂&apos;, &apos;疑问&apos;, &apos;嘘&apos;, &apos;晕&apos;, &apos;折磨&apos;, &apos;衰&apos;, &apos;骷髅&apos;, &apos;敲打&apos;, &apos;再见&apos;, &apos;擦汗&apos;, &apos;抠鼻&apos;, &apos;鼓掌&apos;, &apos;糗大了&apos;, &apos;坏笑&apos;, &apos;左哼哼&apos;, &apos;右哼哼&apos;, &apos;哈欠&apos;, &apos;鄙视&apos;, &apos;委屈&apos;, &apos;快哭了&apos;, &apos;阴险&apos;, &apos;亲亲&apos;, &apos;吓&apos;, &apos;可怜&apos;, &apos;菜刀&apos;, &apos;西瓜&apos;, &apos;啤酒&apos;, &apos;篮球&apos;, &apos;乒乓&apos;, &apos;咖啡&apos;, &apos;饭&apos;, &apos;猪头&apos;, &apos;玫瑰&apos;, &apos;凋谢&apos;, &apos;示爱&apos;, &apos;爱心&apos;, &apos;心碎&apos;, &apos;蛋糕&apos;, &apos;闪电&apos;, &apos;炸弹&apos;, &apos;刀&apos;, &apos;足球&apos;, &apos;瓢虫&apos;, &apos;便便&apos;, &apos;月亮&apos;, &apos;太阳&apos;, &apos;礼物&apos;, &apos;拥抱&apos;, &apos;强&apos;, &apos;弱&apos;, &apos;握手&apos;, &apos;胜利&apos;, &apos;抱拳&apos;, &apos;勾引&apos;, &apos;拳头&apos;, &apos;差劲&apos;, &apos;爱你&apos;, &apos;NO&apos;, &apos;OK&apos;, &apos;爱情&apos;, &apos;飞吻&apos;, &apos;跳跳&apos;, &apos;发抖&apos;, &apos;怄火&apos;, &apos;转圈&apos;, &apos;磕头&apos;, &apos;回头&apos;, &apos;跳绳&apos;, &apos;挥手&apos;, &apos;激动&apos;, &apos;街舞&apos;, &apos;献吻&apos;, &apos;左太极&apos;, &apos;右太极&apos;];</span><br><span class="line">let index = list.indexOf(word);</span><br><span class="line">return `&lt;img src=&quot;https://res.wx.qq.com/mpres/htmledition/images/icon/emotion/$&#123;index&#125;.gif&quot; align=&quot;middle&quot;&gt;`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">margin-top: 20px;</span><br><span class="line">width: 400px;</span><br><span class="line">&#125;</span><br><span class="line">.text &#123;</span><br><span class="line">display: block;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">margin-bottom: 10px;</span><br><span class="line">width: 400px;</span><br><span class="line">resize: none;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">padding: 5px 10px;</span><br><span class="line">border-radius: 8px;</span><br><span class="line">&#125;</span><br><span class="line">.text-place &#123;</span><br><span class="line">height: 80px;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">padding: 5px 10px;</span><br><span class="line">border-radius: 8px;</span><br><span class="line">background: #ddd5d5;</span><br><span class="line">&#125;</span><br><span class="line">.text-place p &#123;</span><br><span class="line">display: flex;</span><br><span class="line">align-items: center;</span><br><span class="line">margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.emotion-box &#123;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">width: 100%;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">padding: 5px;</span><br><span class="line">border: 1px solid #b4b4b4;</span><br><span class="line">overflow: hidden;</span><br><span class="line">overflow-y: auto;</span><br><span class="line">&#125;</span><br><span class="line">.emotion-box-line &#123;</span><br><span class="line">display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.emotion-item &#123;</span><br><span class="line">flex: 1;</span><br><span class="line">text-align: center;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ly-emotion &#123;</span><br><span class="line">  display: inline-block</span><br><span class="line">&#125;</span><br><span class="line">.ly-static-emotion &#123;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-emotion-js"><a href="#v-emotion-js" class="headerlink" title="v-emotion.js"></a>v-emotion.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;v-emotion&apos;,&#123;</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: [</span><br><span class="line">[&apos;微笑&apos;, &apos;撇嘴&apos;, &apos;色&apos;, &apos;发呆&apos;, &apos;得意&apos;, &apos;流泪&apos;, &apos;害羞&apos;, &apos;闭嘴&apos;],</span><br><span class="line">[&apos;睡&apos;, &apos;大哭&apos;, &apos;尴尬&apos;, &apos;发怒&apos;, &apos;调皮&apos;, &apos;呲牙&apos;, &apos;惊讶&apos;, &apos;难过&apos;]</span><br><span class="line">[&apos;酷&apos;, &apos;冷汗&apos;, &apos;抓狂&apos;, &apos;吐&apos;, &apos;偷笑&apos;, &apos;可爱&apos;, &apos;白眼&apos;, &apos;傲慢&apos;],</span><br><span class="line">[&apos;饥饿&apos;, &apos;困&apos;, &apos;惊恐&apos;, &apos;流汗&apos;, &apos;憨笑&apos;, &apos;大兵&apos;, &apos;奋斗&apos;, &apos;咒骂&apos;],</span><br><span class="line">[&apos;疑问&apos;, &apos;嘘&apos;, &apos;晕&apos;, &apos;折磨&apos;, &apos;衰&apos;, &apos;骷髅&apos;, &apos;敲打&apos;, &apos;再见&apos;],</span><br><span class="line">[&apos;擦汗&apos;, &apos;抠鼻&apos;, &apos;鼓掌&apos;, &apos;糗大了&apos;, &apos;坏笑&apos;, &apos;左哼哼&apos;, &apos;右哼哼&apos;, &apos;哈欠&apos;],</span><br><span class="line">[&apos;鄙视&apos;, &apos;委屈&apos;, &apos;快哭了&apos;, &apos;阴险&apos;, &apos;亲亲&apos;, &apos;吓&apos;, &apos;可怜&apos;, &apos;菜刀&apos;],</span><br><span class="line">[&apos;西瓜&apos;, &apos;啤酒&apos;, &apos;篮球&apos;, &apos;乒乓&apos;, &apos;咖啡&apos;, &apos;饭&apos;, &apos;猪头&apos;, &apos;玫瑰&apos;,],</span><br><span class="line">[&apos;凋谢&apos;, &apos;示爱&apos;, &apos;爱心&apos;, &apos;心碎&apos;, &apos;蛋糕&apos;, &apos;闪电&apos;, &apos;炸弹&apos;, &apos;刀&apos;],</span><br><span class="line">[&apos;足球&apos;, &apos;瓢虫&apos;, &apos;便便&apos;, &apos;月亮&apos;, &apos;太阳&apos;, &apos;礼物&apos;, &apos;拥抱&apos;, &apos;强&apos;],</span><br><span class="line">[&apos;弱&apos;, &apos;握手&apos;, &apos;胜利&apos;, &apos;抱拳&apos;, &apos;勾引&apos;, &apos;拳头&apos;, &apos;差劲&apos;, &apos;爱你&apos;],</span><br><span class="line">[&apos;NO&apos;, &apos;OK&apos;, &apos;爱情&apos;, &apos;飞吻&apos;, &apos;跳跳&apos;, &apos;发抖&apos;, &apos;怄火&apos;, &apos;转圈&apos;],</span><br><span class="line">[&apos;磕头&apos;, &apos;回头&apos;, &apos;跳绳&apos;, &apos;挥手&apos;, &apos;激动&apos;, &apos;街舞&apos;, &apos;左太极&apos;, &apos;右太极&apos;],</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `&lt;div&gt;&lt;div class=&quot;emotion-box&quot; :style=&quot;&#123;height: height + &apos;px&apos; &#125;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;emotion-box-line&quot; v-for=&quot;(line, i) in list&quot; :key=&quot;i&quot; &gt;</span><br><span class="line">&lt;emotion class=&quot;emotion-item&quot; v-for=&quot;(item, i) in line&quot; :key=&quot;i&quot; @click.native=&quot;clickHandler(item)&quot; &gt;&#123;&#123;item&#125;&#125;&lt;/emotion&gt;</span><br><span class="line">&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;`,</span><br><span class="line">props: &#123;</span><br><span class="line">height: &#123;</span><br><span class="line">type: Number,</span><br><span class="line">default: 200,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">clickHandler (i) &#123;</span><br><span class="line">let emotion = `#$&#123;i&#125;;`</span><br><span class="line">this.$emit(&apos;emotion&apos;, emotion)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="emotion-js"><a href="#emotion-js" class="headerlink" title="emotion.js"></a>emotion.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;emotion&apos;,&#123;</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `&lt;div class=&quot;ly-emotion&quot; &gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;`,</span><br><span class="line">name: &apos;ly-emotion&apos;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">const name = this.$el.innerHTML;</span><br><span class="line">console.log(name);</span><br><span class="line">const list = [&apos;微笑&apos;, &apos;撇嘴&apos;, &apos;色&apos;, &apos;发呆&apos;, &apos;得意&apos;, &apos;流泪&apos;, &apos;害羞&apos;, &apos;闭嘴&apos;, &apos;睡&apos;, &apos;大哭&apos;, &apos;尴尬&apos;, &apos;发怒&apos;, &apos;调皮&apos;, &apos;呲牙&apos;, &apos;惊讶&apos;, &apos;难过&apos;, &apos;酷&apos;, &apos;冷汗&apos;, &apos;抓狂&apos;, &apos;吐&apos;, &apos;偷笑&apos;, &apos;可爱&apos;, &apos;白眼&apos;, &apos;傲慢&apos;, &apos;饥饿&apos;, &apos;困&apos;, &apos;惊恐&apos;, &apos;流汗&apos;, &apos;憨笑&apos;, &apos;大兵&apos;, &apos;奋斗&apos;, &apos;咒骂&apos;, &apos;疑问&apos;, &apos;嘘&apos;, &apos;晕&apos;, &apos;折磨&apos;, &apos;衰&apos;, &apos;骷髅&apos;, &apos;敲打&apos;, &apos;再见&apos;, &apos;擦汗&apos;, &apos;抠鼻&apos;, &apos;鼓掌&apos;, &apos;糗大了&apos;, &apos;坏笑&apos;, &apos;左哼哼&apos;, &apos;右哼哼&apos;, &apos;哈欠&apos;, &apos;鄙视&apos;, &apos;委屈&apos;, &apos;快哭了&apos;, &apos;阴险&apos;, &apos;亲亲&apos;, &apos;吓&apos;, &apos;可怜&apos;, &apos;菜刀&apos;, &apos;西瓜&apos;, &apos;啤酒&apos;, &apos;篮球&apos;, &apos;乒乓&apos;, &apos;咖啡&apos;, &apos;饭&apos;, &apos;猪头&apos;, &apos;玫瑰&apos;, &apos;凋谢&apos;, &apos;示爱&apos;, &apos;爱心&apos;, &apos;心碎&apos;, &apos;蛋糕&apos;, &apos;闪电&apos;, &apos;炸弹&apos;, &apos;刀&apos;, &apos;足球&apos;, &apos;瓢虫&apos;, &apos;便便&apos;, &apos;月亮&apos;, &apos;太阳&apos;, &apos;礼物&apos;, &apos;拥抱&apos;, &apos;强&apos;, &apos;弱&apos;, &apos;握手&apos;, &apos;胜利&apos;, &apos;抱拳&apos;, &apos;勾引&apos;, &apos;拳头&apos;, &apos;差劲&apos;, &apos;爱你&apos;, &apos;NO&apos;, &apos;OK&apos;, &apos;爱情&apos;, &apos;飞吻&apos;, &apos;跳跳&apos;, &apos;发抖&apos;, &apos;怄火&apos;, &apos;转圈&apos;, &apos;磕头&apos;, &apos;回头&apos;, &apos;跳绳&apos;, &apos;挥手&apos;, &apos;激动&apos;, &apos;街舞&apos;, &apos;献吻&apos;, &apos;左太极&apos;, &apos;右太极&apos;];</span><br><span class="line">let index = list.indexOf(name);</span><br><span class="line">let imgHTML = `&lt;img src=&quot;https://res.wx.qq.com/mpres/htmledition/images/icon/emotion/$&#123;index&#125;.gif&quot;&gt;`;</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">this.$el.innerHTML = imgHTML;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="此Demo为在工作中所遇到的需求"><a href="#此Demo为在工作中所遇到的需求" class="headerlink" title="此Demo为在工作中所遇到的需求"></a>此Demo为在工作中所遇到的需求</h2><blockquote><p>记录下来，更多有助于自己去总结和技术提升之后的优化代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;emoji表情Demo&quot;&gt;&lt;a href=&quot;#emoji表情Demo&quot; class=&quot;headerlink&quot; title=&quot;emoji表情Demo&quot;&gt;&lt;/a&gt;emoji表情Demo&lt;/h2&gt;&lt;h2 id=&quot;直接上代码&quot;&gt;&lt;a href=&quot;#直接上代码&quot; class=&quot;headerlink&quot; title=&quot;直接上代码&quot;&gt;&lt;/a&gt;直接上代码&lt;/h2&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于前端跨域解决方法</title>
    <link href="http://yoursite.com/2018/11/12/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/12/关于前端跨域解决方法/</id>
    <published>2018-11-12T02:11:16.000Z</published>
    <updated>2018-11-12T03:26:28.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote><ol><li>网络协议不同(http/https)</li></ol></blockquote><hr><blockquote><ol start="2"><li>域名不同(<a href="http://www.baidu.com/www.baidu.cn" target="_blank" rel="noopener">www.baidu.com/www.baidu.cn</a>)</li></ol></blockquote><hr><blockquote><ol start="3"><li>端口不一样</li></ol></blockquote><hr><blockquote><ol start="4"><li>以上三个都一样时称“同源策略”，否则就是跨域请求</li></ol></blockquote><a id="more"></a><h2 id="在前端HTML中的部分标签是自带跨域天赋"><a href="#在前端HTML中的部分标签是自带跨域天赋" class="headerlink" title="在前端HTML中的部分标签是自带跨域天赋"></a>在前端HTML中的部分标签是自带跨域天赋</h2><blockquote><p>a连接、重定向、Form表单提交</p></blockquote><hr><blockquote><p>资源引入：<br><strong><code>&lt;link&gt;</code></strong> 、 <strong><code>&lt;script&gt;</code></strong> 、 <strong><code>&lt;img&gt;</code></strong>等…css里面的 <strong><code>background-image</code></strong> 、 <strong><code>@font-face()</code></strong><br>在img中第三方的服务端会有防盗链使获取不到图片</p></blockquote><h2 id="跨域解决"><a href="#跨域解决" class="headerlink" title="跨域解决"></a>跨域解决</h2><h3 id="ajax-JSONP"><a href="#ajax-JSONP" class="headerlink" title="ajax-JSONP"></a>ajax-JSONP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: &apos;http://www.baidu.com:8080/action&apos;,</span><br><span class="line">    type: &apos;get&apos;,</span><br><span class="line">    dataType: &apos;jsonp&apos;,  // 请求方式为jsonp</span><br><span class="line">    jsonpCallback: &quot;collback&quot;,    // 自定义回调函数名</span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="proxyTable代理-node"><a href="#proxyTable代理-node" class="headerlink" title="proxyTable代理(node)"></a>proxyTable代理(node)</h3><h5 id="这个代理实际上是用的node的http-proxy-middleware插件完成跨域请求"><a href="#这个代理实际上是用的node的http-proxy-middleware插件完成跨域请求" class="headerlink" title="这个代理实际上是用的node的http-proxy-middleware插件完成跨域请求"></a>这个代理实际上是用的node的http-proxy-middleware插件完成跨域请求</h5><h5 id="代理跨域本质-本地服务器-–》-代理-–》目标服务器-–》拿到数据后通过代理伪装成本地服务请求的返回值-—》然后浏览器就顺利收到了我们想要的数据"><a href="#代理跨域本质-本地服务器-–》-代理-–》目标服务器-–》拿到数据后通过代理伪装成本地服务请求的返回值-—》然后浏览器就顺利收到了我们想要的数据" class="headerlink" title="代理跨域本质 本地服务器 –》 代理 –》目标服务器 –》拿到数据后通过代理伪装成本地服务请求的返回值 —》然后浏览器就顺利收到了我们想要的数据"></a>代理跨域本质 本地服务器 –》 代理 –》目标服务器 –》拿到数据后通过代理伪装成本地服务请求的返回值 —》然后浏览器就顺利收到了我们想要的数据</h5><h3 id="以上是两种是我常用的、以下是前端的各种跨域解决方式"><a href="#以上是两种是我常用的、以下是前端的各种跨域解决方式" class="headerlink" title="以上是两种是我常用的、以下是前端的各种跨域解决方式"></a>以上是两种是我常用的、以下是前端的各种跨域解决方式</h3><blockquote><p>1、通过jsonp跨域<br>2、 document.domain + iframe跨域<br>3、 location.hash + iframe<br>4、 window.name + iframe跨域<br>5、 postMessage跨域<br>6、 跨域资源共享（CORS）<br>7、 nginx代理跨域<br>8、 nodejs中间件代理跨域<br>9、 WebSocket协议跨域</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;网络协议不同(http/https)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;域名不同(&lt;a href=&quot;http://www.baidu.com/www.baidu.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.baidu.com/www.baidu.cn&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;端口不一样&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;以上三个都一样时称“同源策略”，否则就是跨域请求&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>记一个音乐播放器进度条组件-Vue</title>
    <link href="http://yoursite.com/2018/11/02/%E8%AE%B0%E4%B8%80%E4%B8%AA%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%BB%84%E4%BB%B6-Vue/"/>
    <id>http://yoursite.com/2018/11/02/记一个音乐播放器进度条组件-Vue/</id>
    <published>2018-11-02T13:21:13.000Z</published>
    <updated>2018-11-03T08:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="音乐播放器之进度条"><a href="#音乐播放器之进度条" class="headerlink" title="音乐播放器之进度条"></a>音乐播放器之进度条</h1><ol><li>HTML代码部分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; v-cloak&gt;</span><br><span class="line">&lt;audio src=&quot;http://up.mcyt.net/?down/46426.mp3&quot; ref=&quot;player&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;p&gt;已播放时间:&#123;&#123;cTime&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;总时间:&#123;&#123;dTime&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;button @click=&quot;audioState&quot;&gt;&#123;&#123;status&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;div class=&quot;bar&quot;&gt;</span><br><span class="line">&lt;div class=&quot;progressbar&quot; ref=&quot;runfatbar&quot; @click=&quot;playMusic&quot;&gt;</span><br><span class="line">&lt;div class=&quot;greenbar&quot; ref=&quot;runbar&quot;&gt;</span><br><span class="line">&lt;span class=&quot;yuan&quot; draggable=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.17/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>JavaScript代码部分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">cTime:&apos;00:00&apos;,</span><br><span class="line">dTime:&apos;00:00&apos;,</span><br><span class="line">play:false,</span><br><span class="line">status:&apos;暂停&apos;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">const music = this.$refs.player;  // 音频所在对象</span><br><span class="line">const musicBar = this.$refs.runbar;  // 颜色进度条所在对象</span><br><span class="line">const musicWidth = this.$refs.runfatbar.offsetWidth; // 底部进度条总宽</span><br><span class="line"></span><br><span class="line">// 初始化音频信息</span><br><span class="line">music.addEventListener(&apos;canplay&apos;, () =&gt; &#123;</span><br><span class="line">const musicTime = music.duration; // 获得音频时长</span><br><span class="line">const branch = Math.floor(musicTime / 60); // 计算音频分钟</span><br><span class="line">const second = Math.ceil(musicTime % 60); // 计算音频秒</span><br><span class="line"></span><br><span class="line">if(branch &lt; 10 &amp;&amp; second &lt; 10)&#123;  // 四种情况判断音频总时间</span><br><span class="line">this.dTime = `0$&#123;branch&#125;:0$&#123;second&#125;`;</span><br><span class="line">&#125;else if(branch &lt; 10)&#123;</span><br><span class="line">this.dTime = `0$&#123;branch&#125;:$&#123;second&#125;`;</span><br><span class="line">&#125;else if(second &lt; 10)&#123;</span><br><span class="line">this.dTime = `$&#123;branch&#125;:0$&#123;second&#125;`;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.dTime = `$&#123;branch&#125;:$&#123;second&#125;`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 音频正在播放</span><br><span class="line">music.addEventListener(&apos;timeupdate&apos;,() =&gt; &#123;</span><br><span class="line">const musicTime = music.duration; // 获得音频时长</span><br><span class="line">const stopTime = music.currentTime // 获得已播放的音频时长</span><br><span class="line"></span><br><span class="line">musicBar.style.width = `$&#123;(stopTime / musicTime) * 100&#125;%`; // 计算进度条所在比例宽度</span><br><span class="line">const branch = Math.floor(stopTime / 60); // 计算已播放的音频分钟</span><br><span class="line">const second = Math.floor(stopTime % 60); // 计算已播放的音频秒</span><br><span class="line"></span><br><span class="line">if (branch &lt; 10 &amp;&amp; second &lt; 10) &#123; // 四种情况判断显示音频以播放时间</span><br><span class="line">this.cTime = `0$&#123;branch&#125;:0$&#123;second&#125;`;</span><br><span class="line">&#125; else if (branch &lt; 10) &#123;</span><br><span class="line">this.cTime = `0$&#123;branch&#125;:$&#123;second&#125;`;</span><br><span class="line">&#125; else if (second &lt; 10) &#123;</span><br><span class="line">this.cTime = `$&#123;branch&#125;:0$&#123;second&#125;`;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.cTime = `$&#123;branch&#125;:$&#123;second&#125;`;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 移动端监听进度条触摸拖动</span><br><span class="line">musicBar.addEventListener(&apos;touchmove&apos;,(event) =&gt; &#123;</span><br><span class="line">const events = event.targetTouches[0].pageX; // 获得触摸拖动的距离</span><br><span class="line">musicBar.style.width = `$&#123;(events / musicWidth) * 100&#125;%`; // 计算进度条所在比例宽度</span><br><span class="line">music.pause(); // 触摸拖动时停止播放</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 移动端监听进度条触摸拖动结束</span><br><span class="line">musicBar.addEventListener(&apos;touchend&apos;,() =&gt; &#123;</span><br><span class="line">const touwidth = (musicBar.offsetWidth / musicWidth); // 计算进度条所在比例</span><br><span class="line">music.currentTime = music.duration * touwidth; // 通过所在比例赋值给音频应在的播放时间</span><br><span class="line">music.play(); // 根据播放时间开始播放</span><br><span class="line">this.play = true // 更改播放暂停按钮为播放</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">// 播放暂停</span><br><span class="line">audioState()&#123;</span><br><span class="line">this.play = !this.play;</span><br><span class="line">const music = this.$refs.player;</span><br><span class="line">if(this.play)&#123;</span><br><span class="line">music.play();</span><br><span class="line">this.status = &apos;播放&apos;;</span><br><span class="line">console.log(&apos;开始播放&apos;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">music.pause();</span><br><span class="line">this.status = &apos;暂停&apos;;</span><br><span class="line">console.log(&apos;暂停播放&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 点击进度条事件</span><br><span class="line">playMusic(e)&#123;</span><br><span class="line">const music = this.$refs.player; // 音频所在对象</span><br><span class="line">const barWidth = e.pageX / this.$refs.runfatbar.offsetWidth; // 计算点击位置相对父元素总宽的比例</span><br><span class="line">this.$refs.runbar.style.width = `$&#123;barWidth * 100&#125;%`; // 进度条应所在的比例总宽</span><br><span class="line">music.currentTime = music.duration * barWidth; // 计算点击时应播放所在的时间</span><br><span class="line">music.play(); // 播放音频</span><br><span class="line">this.play = true; // 更改播放暂停按钮为播放</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Css部分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak]&#123;</span><br><span class="line">display: none !important;</span><br><span class="line">&#125;</span><br><span class="line">.bar&#123;</span><br><span class="line">width:100%;</span><br><span class="line">height:30px;</span><br><span class="line">line-height:30px;</span><br><span class="line">&#125;</span><br><span class="line">.bar .progressbar&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height:10px;</span><br><span class="line">background-color: #999999;</span><br><span class="line">margin-top:10px;</span><br><span class="line">border-radius:30px;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.bar .greenbar &#123;</span><br><span class="line">width: 0%;</span><br><span class="line">height:10px;</span><br><span class="line">border-radius:30px;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">background-color: #1296db;</span><br><span class="line">&#125;</span><br><span class="line">.bar .greenbar .yuan&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">background-color: #ffffff;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>$refs，ref</li></ol><ul><li><p>ref简单理解就好比一个标签的id属性</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;testId&quot;&gt;这里是一个p标签&lt;/p&gt;</span><br><span class="line">&lt;p ref=&quot;testId&quot;&gt;这里是一个p标签&lt;/p&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>this.$refs.testId.value与document.getelementbyid(“testId”).value</p><blockquote><p>获取的都是一样的结果<br>在Vue中使用$refs去操作节点会减少对于Dom的操作</p></blockquote></li></ul><ol start="5"><li>v-cloak<blockquote><p>在页面加载未完成显示白屏避免显示出Vue变量名</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;音乐播放器之进度条&quot;&gt;&lt;a href=&quot;#音乐播放器之进度条&quot; class=&quot;headerlink&quot; title=&quot;音乐播放器之进度条&quot;&gt;&lt;/a&gt;音乐播放器之进度条&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;HTML代码部分&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot; v-cloak&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;audio src=&amp;quot;http://up.mcyt.net/?down/46426.mp3&amp;quot; ref=&amp;quot;player&amp;quot;&amp;gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;已播放时间:&amp;#123;&amp;#123;cTime&amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;总时间:&amp;#123;&amp;#123;dTime&amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;button @click=&amp;quot;audioState&amp;quot;&amp;gt;&amp;#123;&amp;#123;status&amp;#125;&amp;#125;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;div class=&amp;quot;bar&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;div class=&amp;quot;progressbar&amp;quot; ref=&amp;quot;runfatbar&amp;quot; @click=&amp;quot;playMusic&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;div class=&amp;quot;greenbar&amp;quot; ref=&amp;quot;runbar&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;span class=&amp;quot;yuan&amp;quot; draggable=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.bootcss.com/vue/2.5.17/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2018/10/25/Hello-Node/"/>
    <id>http://yoursite.com/2018/10/25/Hello-Node/</id>
    <published>2018-10-25T07:36:14.000Z</published>
    <updated>2018-11-03T08:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-Node"><a href="#Hello-Node" class="headerlink" title="Hello Node"></a>Hello Node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">const server = http.createServer(req,res =&gt; &#123;</span><br><span class="line">    res.end(&apos;Hello Node\n&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8888);</span><br><span class="line"></span><br><span class="line">// 终端打印如下信息</span><br><span class="line">console.log(&apos;Server running at http://127.0.0.1:8888/&apos;);</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hello-Node&quot;&gt;&lt;a href=&quot;#Hello-Node&quot; class=&quot;headerlink&quot; title=&quot;Hello Node&quot;&gt;&lt;/a&gt;Hello Node&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var http = require(&amp;apos;http&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const server = http.createServer(req,res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.end(&amp;apos;Hello Node\n&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 终端打印如下信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(&amp;apos;Server running at http://127.0.0.1:8888/&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
</feed>
